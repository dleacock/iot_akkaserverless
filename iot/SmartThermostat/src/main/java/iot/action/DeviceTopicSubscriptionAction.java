/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package iot.action;

import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.google.protobuf.Empty;
import iot.api.SmartThermostatApi.SmartThermostat;
import iot.domain.DeviceDomain.DeviceState;
import iot.domain.DeviceDomain.DeviceType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * An action.
 */
public class DeviceTopicSubscriptionAction extends AbstractDeviceTopicSubscriptionAction {
    private static final Logger log = LoggerFactory.getLogger(DeviceTopicSubscriptionAction.class);
    private final ServiceCallRef<SmartThermostat> createSmartThermostatServiceCallRef;

    public DeviceTopicSubscriptionAction(ActionCreationContext creationContext) {
        createSmartThermostatServiceCallRef = creationContext
                .serviceCallFactory()
                .lookup("iot.api.SmartThermostatService", "UpsertSmartThermostat", SmartThermostat.class);
    }

    @Override
    public Effect<Empty> connect(DeviceState deviceState) {
        final String deviceId = deviceState.getId();
        final String deviceName = deviceState.getName();
        final String currentValue = deviceState.getValue();
        final DeviceType deviceType = deviceState.getType();

        if (!deviceType.equals(DeviceType.THERMOSTAT)) {
            return effects().reply(Empty.getDefaultInstance());
        }

        log.info("Thermostat State detected id={}, name={}, val={} - Sending API call to SmartThermostat",
                deviceId, deviceName, currentValue);

        SmartThermostat createSmartThermostat = SmartThermostat.newBuilder()
                .setId(deviceId)
                .setValue(currentValue)
                .build();

        return effects().forward(createSmartThermostatServiceCallRef.createCall(createSmartThermostat));
    }
}
