/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */

package iot.action;

import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.action.ActionCreationContext;
import com.google.protobuf.Empty;
import iot.api.SmartDeviceApi;
import iot.domain.DeviceDomain.DeviceState;
import iot.domain.DeviceDomain.DeviceType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * An action.
 */
public class DeviceTopicSubscriptionAction extends AbstractDeviceTopicSubscriptionAction {
    private static final Logger log = LoggerFactory.getLogger(DeviceTopicSubscriptionAction.class);
    private final ServiceCallRef<SmartDeviceApi.SmartDeviceConnected> deviceConnectedServiceCallRef;

    public DeviceTopicSubscriptionAction(ActionCreationContext creationContext) {
        deviceConnectedServiceCallRef = creationContext
                .serviceCallFactory()
                .lookup("iot.api.SmartDeviceService", "ConnectDevice", SmartDeviceApi.SmartDeviceConnected.class);
    }

    @Override
    public Effect<Empty> connect(DeviceState deviceState) {
        final String deviceId = deviceState.getId();
        final String deviceName = deviceState.getName();
        final String currentValue = deviceState.getValue();
        final DeviceType deviceType = deviceState.getType();

        if (!deviceType.equals(DeviceType.THERMOSTAT)) {
            return effects().reply(Empty.getDefaultInstance());
        }

        log.info("Device Connected id={}, name={}, val={} - Sending API call", deviceId, deviceName, currentValue);

        SmartDeviceApi.SmartDeviceConnected deviceConnected = SmartDeviceApi.SmartDeviceConnected.newBuilder()
                .setDeviceId(deviceId)
                .setDeviceName(deviceName)
                .setCurrentValue(currentValue)
                .build();

        return effects().forward(deviceConnectedServiceCallRef.createCall(deviceConnected));
    }
}
