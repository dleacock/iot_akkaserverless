/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.valueentity.ValueEntityContext;
import com.google.protobuf.Empty;
import iot.api.SmartThermostatApi;
import iot.domain.SmartThermostatDomain.SmartThermostatState;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A value entity.
 */
public class SmartThermostat extends AbstractSmartThermostat {
    @SuppressWarnings("unused")
    private final String entityId;
    private static final Logger log = LoggerFactory.getLogger(SmartThermostat.class);

    public SmartThermostat(ValueEntityContext context) {
        this.entityId = context.entityId();
    }

    @Override
    public SmartThermostatState emptyState() {
        return SmartThermostatState.getDefaultInstance();
    }

    @Override
    public Effect<Empty> upsertSmartThermostat(SmartThermostatState currentState, SmartThermostatApi.SmartThermostat smartThermostat) {
        final String smartThermostatId = smartThermostat.getId();
        final String currentValue = smartThermostat.getValue();

        if (currentState.getId().equals(smartThermostatId)) {
            log.info("SmartThermostat {} already connected.", smartThermostatId);

            // UPDATE STATE

            return effects().reply(Empty.getDefaultInstance());
        } else {
            log.info("Connecting SmartThermostat id={}, current value={}", smartThermostatId, currentValue);

            final SmartThermostatState newState = currentState.toBuilder()
                    .setId(smartThermostatId)
                    .setValue(currentValue)
                    .build();

            return effects()
                    .updateState(newState)
                    .thenReply(Empty.getDefaultInstance());
        }
    }
}

