/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.eventsourcedentity.EventSourcedEntityContext;
import com.google.protobuf.Empty;
import iot.api.SmartThermostatApi;
import iot.domain.SmartThermostatDomain.SmartThermostatCreated;
import iot.domain.SmartThermostatDomain.SmartThermostatState;
import iot.domain.SmartThermostatDomain.TemperatureAlert;
import iot.domain.SmartThermostatDomain.TemperatureChanged;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * A value entity.
 */
public class SmartThermostat extends AbstractSmartThermostat {
    @SuppressWarnings("unused")
    private final String entityId;
    private static final Logger log = LoggerFactory.getLogger(SmartThermostat.class);

    public SmartThermostat(EventSourcedEntityContext context) {
        this.entityId = context.entityId();
    }

    @Override
    public SmartThermostatState emptyState() {
        return SmartThermostatState.getDefaultInstance();
    }

    @Override
    public Effect<Empty> upsertSmartThermostat(SmartThermostatState currentState, SmartThermostatApi.SmartThermostat smartThermostat) {
        final String smartThermostatId = smartThermostat.getId();
        final String newTemperature = smartThermostat.getValue();

        if (currentState.getId().equals(smartThermostatId)) {
            final TemperatureChanged temperatureChanged = TemperatureChanged.newBuilder().setValue(newTemperature).build();
            if (Integer.parseInt(newTemperature) > 40 || Integer.parseInt(newTemperature) < 20) {
                final TemperatureAlert temperatureAlert = TemperatureAlert.newBuilder().setValue(newTemperature).build();

                // This is where we could contact an external API to send a SMS or Email notification
                contactExternalService();

                return effects()
                        .emitEvents(List.of(temperatureChanged, temperatureAlert))
                        .thenReply(newState -> Empty.getDefaultInstance());
            }

            return effects()
                    .emitEvent(temperatureChanged)
                    .thenReply(newState -> Empty.getDefaultInstance());
        } else {
            final SmartThermostatCreated SmartThermostatCreated = SmartThermostatDomain.SmartThermostatCreated.newBuilder()
                    .setId(smartThermostatId)
                    .setValue(newTemperature)
                    .build();

            return effects()
                    .emitEvent(SmartThermostatCreated)
                    .thenReply(newState -> Empty.getDefaultInstance());
        }
    }

    @Override
    public SmartThermostatState smartThermostatCreated(SmartThermostatState currentState, SmartThermostatCreated smartThermostatCreated) {
        final String id = smartThermostatCreated.getId();
        final String value = smartThermostatCreated.getValue();
        log.info("SmartThermostat Created id={}, initial value={}", id, value);

        return SmartThermostatState.newBuilder().setId(id).setValue(value).build();
    }

    @Override
    public SmartThermostatState temperatureChanged(SmartThermostatState currentState, TemperatureChanged temperatureChanged) {
        final String id = currentState.getId();
        final String currentTemperature = currentState.getValue();
        final String updatedTemperature = temperatureChanged.getValue();
        log.info("Updating temperature id={} from={} to={}", id, currentTemperature, updatedTemperature);

        return SmartThermostatState.newBuilder().setId(id).setValue(updatedTemperature).build();
    }

    @Override
    public SmartThermostatState temperatureAlert(SmartThermostatState currentState, TemperatureAlert temperatureAlert) {
        final String id = currentState.getId();
        final String value = temperatureAlert.getValue();
        log.info("Alert Triggered for SmartThermostat id={} due to current temperature of value={}", id, value);

        return SmartThermostatState.newBuilder().setId(id).setValue(value).build();
    }

    private void contactExternalService() {
        log.info("*** Calling External Service to send SMS Notification of temperature alert. ***");
    }
}

