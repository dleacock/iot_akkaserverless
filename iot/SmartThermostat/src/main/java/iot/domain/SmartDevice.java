/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.valueentity.ValueEntityContext;
import com.google.protobuf.Empty;
import iot.api.SmartDeviceApi;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** A value entity. */
public class SmartDevice extends AbstractSmartDevice {
  @SuppressWarnings("unused")
  private final String entityId;
  private static final Logger log = LoggerFactory.getLogger(SmartDevice.class);

  public SmartDevice(ValueEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public SmartDeviceDomain.SmartDeviceState emptyState() {
    return SmartDeviceDomain.SmartDeviceState.getDefaultInstance();
  }

  @Override
  public Effect<Empty> connectDevice(SmartDeviceDomain.SmartDeviceState currentState, SmartDeviceApi.SmartDeviceConnected command) {
    final String deviceId = command.getDeviceId();
    final String name = command.getDeviceName();
    final String currentValue = command.getCurrentValue();

    if (currentState.getDeviceId().equals(deviceId)) {
      log.info("SmartThermostat {} - {} already connected.", name, deviceId);

      return effects().reply(Empty.getDefaultInstance());
    } else {
      log.info("Connecting SmartThermostat id={}, name={}, current value={}", deviceId, name, currentValue);

      final SmartDeviceDomain.SmartDeviceState newState = currentState.toBuilder()
              .setDeviceId(deviceId)
              .setDeviceName(name)
              .setCurrentValue(currentValue)
              .build();

      return effects()
              .updateState(newState)
              .thenReply(Empty.getDefaultInstance());
    }
  }
}
