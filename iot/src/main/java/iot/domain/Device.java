/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.valueentity.ValueEntityContext;
import com.google.protobuf.Empty;
import iot.DeviceApi;
import iot.DeviceStatePublishingServiceAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** A value entity. */
public class Device extends AbstractDevice {

  private static final Logger log = LoggerFactory.getLogger(Device.class);


  @SuppressWarnings("unused")
  private final String entityId;

  public Device(ValueEntityContext context) {
    this.entityId = context.entityId();
  }

  @Override
  public DeviceDomain.DeviceState emptyState() {
    return DeviceDomain.DeviceState.getDefaultInstance();
  }

  @Override
  public Effect<Empty> connectDevice(DeviceDomain.DeviceState currentState, DeviceApi.DeviceConnected command) {

    String deviceId = command.getDeviceId();
    String name = command.getDeviceName();
    String currentValue = command.getCurrentValue();

    log.info("Connecting Device: {} - {}", name, deviceId);

    DeviceDomain.DeviceState newState = currentState.toBuilder()
            .setDeviceId(deviceId)
            .setDeviceName(name)
            .setCurrentValue(currentValue)
            .build();

    return effects().updateState(newState).thenReply(Empty.getDefaultInstance());
  }

  @Override
  public Effect<Empty> changeDeviceState(DeviceDomain.DeviceState currentState, DeviceApi.DeviceStateChanged deviceStateChanged) {
    String deviceId = deviceStateChanged.getDeviceId();
    String newValue = deviceStateChanged.getCurrentValue();

    log.info("Device state changed!: {} - {}", deviceId, newValue);

    DeviceDomain.DeviceState newState = currentState.toBuilder()
            .setDeviceId(deviceId)
            .setDeviceName(currentState.getDeviceName())
            .setCurrentValue(newValue)
            .build();

    return effects().updateState(newState).thenReply(Empty.getDefaultInstance());
  }
}