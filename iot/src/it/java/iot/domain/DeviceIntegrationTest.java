/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.testkit.junit.AkkaServerlessTestkitResource;
import com.google.protobuf.Empty;
import iot.DeviceApi;
import iot.DeviceServiceClient;
import iot.Main;
import org.junit.ClassRule;
import org.junit.Test;

import static java.util.concurrent.TimeUnit.*;

// Example of an integration test calling our service via the Akka Serverless proxy
// Run all test classes ending with "IntegrationTest" using `mvn verify -Pit`
public class DeviceIntegrationTest {

    /**
     * The test kit starts both the service container and the Akka Serverless proxy.
     */
    @ClassRule
    public static final AkkaServerlessTestkitResource testkit =
            new AkkaServerlessTestkitResource(Main.createAkkaServerless());

    /**
     * Use the generated gRPC client to call the service through the Akka Serverless proxy.
     */
    private final DeviceServiceClient client;

    public DeviceIntegrationTest() {
        client = DeviceServiceClient.create(testkit.getGrpcClientSettings(), testkit.getActorSystem());
    }

    @Test
    public void connectDeviceOnNonExistingEntity() throws Exception {


        final String deviceId = "001";
        final String deviceName = "thermometer";
        final String initialDeviceState = "21";
        final String newDeviceState = "31";


        DeviceApi.DeviceConnected deviceConnected = DeviceApi.DeviceConnected.newBuilder()
                .setDeviceId(deviceId)
                .setDeviceName(deviceName)
                .setCurrentValue(initialDeviceState)
                .build();
        DeviceApi.DeviceStateChanged deviceStateChanged = DeviceApi.DeviceStateChanged.newBuilder()
                .setDeviceId(deviceId)
                .setCurrentValue(newDeviceState)
                .build();

        client.connectDevice(deviceConnected)
                .toCompletableFuture().get(2, SECONDS);

        client.changeDeviceState(deviceStateChanged)
                .toCompletableFuture().get(2, SECONDS);
    }
}