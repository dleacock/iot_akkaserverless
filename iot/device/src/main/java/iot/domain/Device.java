/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.valueentity.ValueEntityContext;
import com.google.protobuf.Empty;
import iot.DeviceApi;
import iot.DeviceStatePublishingServiceAction;
import iot.domain.DeviceDomain.DeviceState;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * A value entity.
 */
public class Device extends AbstractDevice {

    private static final Logger log = LoggerFactory.getLogger(Device.class);

    @SuppressWarnings("unused")
    private final String entityId;

    public Device(ValueEntityContext context) {
        this.entityId = context.entityId();
    }

    @Override
    public DeviceState emptyState() {
        return DeviceState.getDefaultInstance();
    }

    @Override
    public Effect<Empty> connectDevice(DeviceState currentState, DeviceApi.DeviceConnected command) {

        final String deviceId = command.getDeviceId();
        final String name = command.getDeviceName();
        final String currentValue = command.getCurrentValue();

        if (currentState.getDeviceId().equals(deviceId)) {
            log.info("Device {} - {} already connected.", name, deviceId);

            return effects().reply(Empty.getDefaultInstance());
        } else {
            log.info("Connecting Device: {} - {}", name, deviceId);

            final DeviceState newState = currentState.toBuilder()
                    .setDeviceId(deviceId)
                    .setDeviceName(name)
                    .setCurrentValue(currentValue)
                    .build();

            return effects().updateState(newState).thenReply(Empty.getDefaultInstance());
        }
    }

    @Override
    public Effect<Empty> changeDeviceState(DeviceState currentState, DeviceApi.DeviceStateChanged deviceStateChanged) {
        final String deviceId = deviceStateChanged.getDeviceId();
        final String newValue = deviceStateChanged.getCurrentValue();

        if (!currentState.getDeviceId().equals(deviceId)) {
            log.info("Unknown Device: {}", deviceId);
            return effects().reply(Empty.getDefaultInstance());
        } else {

            log.info("Device - {} state changed: {}", deviceId, newValue);

            final DeviceState newState = currentState.toBuilder()
                    .setDeviceId(deviceId)
                    .setDeviceName(currentState.getDeviceName())
                    .setCurrentValue(newValue)
                    .build();

            return effects().updateState(newState).thenReply(Empty.getDefaultInstance());
        }
    }
}