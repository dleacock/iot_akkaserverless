/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.ServiceCallRef;
import com.akkaserverless.javasdk.SideEffect;
import com.akkaserverless.javasdk.valueentity.ValueEntityContext;
import com.google.protobuf.Empty;
import iot.DeviceApi;
import iot.domain.DeviceDomain.DeviceState;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static iot.domain.DeviceDomain.*;

/**
 * A value entity.
 */
public class Device extends AbstractDevice {

    private static final Logger log = LoggerFactory.getLogger(Device.class);

    @SuppressWarnings("unused")
    private final String entityId;

    public Device(ValueEntityContext context) {
        this.entityId = context.entityId();
    }

    @Override
    public DeviceState emptyState() {
        return DeviceState.getDefaultInstance();
    }

    @Override
    public Effect<Empty> connect(DeviceState state, DeviceApi.ConnectDevice connectDevice) {
        final String deviceId = connectDevice.getId();
        final String name = connectDevice.getName();
        final DeviceType deviceType = connectDevice.getType();
        final String currentValue = connectDevice.getValue();

        if (state.getId().equals(deviceId)) {
            log.info("Device {} - {} already connected.", name, deviceId);
            return effects().reply(Empty.getDefaultInstance());
        } else {
            log.info("Connecting Device id={} name={} type={} current value={}",
                    deviceId, name, deviceType, currentValue);

            final DeviceState initialState = state.toBuilder()
                    .setId(deviceId)
                    .setName(name)
                    .setType(deviceType)
                    .setValue(currentValue)
                    .build();

            return effects()
                    .updateState(initialState)
                    .thenReply(Empty.getDefaultInstance());
        }
    }

    @Override
    public Effect<Empty> updateState(DeviceState state, DeviceApi.UpdateDeviceState updateDeviceState) {
        final String deviceId = updateDeviceState.getId();
        final String newValue = updateDeviceState.getValue();

        if (!state.getId().equals(deviceId)) {
            log.info("Unknown Device: {} - Please connect first.", deviceId);
            return effects().reply(Empty.getDefaultInstance());
        } else {

            log.info("Device id={} state changed: {}", deviceId, newValue);

            final DeviceState newState = state.toBuilder()
                    .setId(deviceId)
                    .setName(state.getName())
                    .setType(state.getType())
                    .setValue(newValue)
                    .build();

            return effects()
                    .updateState(newState)
                    .thenReply(Empty.getDefaultInstance());
        }
    }
}