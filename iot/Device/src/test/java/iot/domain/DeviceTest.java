/* This code was generated by Akka Serverless tooling.
 * As long as this file exists it will not be re-generated.
 * You are free to make changes to this file.
 */
package iot.domain;

import com.akkaserverless.javasdk.testkit.ValueEntityResult;
import com.google.protobuf.Empty;
import iot.DeviceApi.ConnectDevice;
import iot.DeviceApi.UpdateDeviceState;
import iot.domain.DeviceDomain.DeviceType;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class DeviceTest {

    private final String deviceId = "001";
    private final String deviceName = "thermometer";
    private final String value = "21";
    private final DeviceType deviceType = DeviceType.THERMOSTAT;

    @Test
    public void connectDeviceTest() {
        final DeviceTestKit testKit = DeviceTestKit.of(Device::new);
        final ConnectDevice connectDevice =
                ConnectDevice.newBuilder()
                        .setName(deviceName)
                        .setId(deviceId)
                        .setType(deviceType)
                        .setValue(value)
                        .build();

        final ValueEntityResult<Empty> result = testKit.connect(connectDevice);

        assertEquals(Empty.getDefaultInstance(), result.getReply());
        assertEquals(testKit.getState().getName(), deviceName);
        assertEquals(testKit.getState().getId(), deviceId);
        assertEquals(testKit.getState().getValue(), value);
        assertEquals(testKit.getState().getType(), deviceType);
    }

    @Test
    public void deviceStateChanged() {
        final DeviceTestKit testKit = DeviceTestKit.of(Device::new);
        final ConnectDevice connectDevice =
                ConnectDevice.newBuilder()
                        .setName(deviceName)
                        .setId(deviceId)
                        .setType(deviceType)
                        .setValue(value)
                        .build();

        final ValueEntityResult<Empty> result = testKit.connect(connectDevice);

        final UpdateDeviceState deviceStateChanged = UpdateDeviceState.newBuilder()
                .setId(deviceId)
                .setValue("30")
                .build();

        testKit.updateState(deviceStateChanged);

        assertEquals(Empty.getDefaultInstance(), result.getReply());
        assertEquals(deviceName, testKit.getState().getName());
        assertEquals(deviceId, testKit.getState().getId());
        assertEquals("30", testKit.getState().getValue());
    }

    @Test
    public void deviceStateChanged_DeviceNotConnected_StateNotChanged() {
        final DeviceTestKit testKit = DeviceTestKit.of(Device::new);
        final ConnectDevice connectDevice =
                ConnectDevice.newBuilder()
                        .setName(deviceName)
                        .setId(deviceId)
                        .setType(deviceType)
                        .setValue(value)
                        .build();

        final ValueEntityResult<Empty> result = testKit.connect(connectDevice);

        final String otherDeviceId = "002";
        final UpdateDeviceState deviceStateChanged = UpdateDeviceState.newBuilder()
                .setId(otherDeviceId)
                .setValue("30")
                .build();

        testKit.updateState(deviceStateChanged);

        assertEquals(Empty.getDefaultInstance(), result.getReply());
        assertEquals(deviceName, testKit.getState().getName());
        assertEquals(deviceId, testKit.getState().getId());
        assertEquals(value, testKit.getState().getValue());
    }
}
